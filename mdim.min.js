function make2DArray(x,y){arr=new Array(x);for(let i=0;i<arr.length;i++)arr[i]=new Array(y);return arr}function makeArray(dim){if(dim&&"object"==typeof dim&&dim.constructor==Array&&!(dim.length<1)&&dim[0]&&dim[0]%1==0){if(1==dim.length)return new Array(dim[0]);{const old=dim[0];return dim.shift(),makeArrayHelp(new Array(old),dim)}}}function makeArrayHelp(arr,dim){if(dim[0]&&dim[0]%1==0){for(let k=0;k<arr.length;k++)arr[k]=new Array(dim[0]);if(dim.length>1){dim.shift();for(let k=0;k<arr.length;k++)arr[k]=makeArrayHelp(arr[k],dim)}return arr}}Array.prototype.copy=function(){if(!this.length)return[];if(this[0]&&this[0].constructor==Array){let arr=[];for(let i=0;i<this.length;i++)arr.push(this[i].copy());return arr}return[...this]},Array.prototype.forEachM=function(f,from=[]){if(!this.length)return;const evaluate=!this[0]||this[0].constructor!=Array;for(let i=0;i<this.length;i++){const pos=[...from];pos.push(i),evaluate?f(this[i],pos):this[i].forEachM(f,pos)}},Array.prototype.fillM=function(f,from=[]){if(!this.length)return;const evaluate=!this[0]||this[0].constructor!=Array,func=f&&f.constructor==Function;for(let i=0;i<this.length;i++){const pos=[...from];if(pos.push(i),evaluate){if(func){this[i]=f(pos,this[i]);continue}this[i]=f}else this[i].fillM(f,pos)}},Array.prototype.dim=function(prev=[]){return prev.push(this.length),this[0]&&this[0].constructor==Array?this[0].dim(prev):prev},Object.defineProperty(Array.prototype,"last",{get:function(){return this[this.length-1]}}),Object.defineProperty(Array.prototype,"lastM",{get:function(){const last=this.last;return last&&last.constructor==Array?last.lastM:last}});
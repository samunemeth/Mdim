function make2DArray(x,y){arr=new Array(x);for(let i=0;i<arr.length;i++)arr[i]=new Array(y);return arr}function makeArray(dim){if(dim&&"object"==typeof dim&&dim.constructor==Array&&!(dim.length<1)&&dim[0]&&dim[0]%1==0){if(1==dim.length)return new Array(dim[0]);{const old=dim[0];return dim.shift(),makeArrayHelp(new Array(old),dim)}}}function makeArrayHelp(arr,dim){if(dim[0]&&dim[0]%1==0){for(let k=0;k<arr.length;k++)arr[k]=new Array(dim[0]);if(dim.length>1){dim.shift();for(let k=0;k<arr.length;k++)arr[k]=makeArrayHelp(arr[k],dim)}return arr}}function removeElement(arr,elem){for(var i=arr.length-1;i>=0;i--)arr[i]==elem&&arr.splice(i,1);return arr}function copyArr(arr){return[...arr]}Array.prototype.forEachM=function(f,from=[]){if(!this.length)return;const evaluate=!this[0]||this[0].constructor!=Array;for(let i=0;i<this.length;i++){const pos=[...from];pos.push(i),evaluate?f(this[i],pos):this[i].forEachM(f,pos)}},Array.prototype.fillM=function(f,from=[]){if(!this.length)return;const evaluate=!this[0]||this[0].constructor!=Array,static=f&&f.constructor!=Function;for(let i=0;i<this.length;i++){const pos=[...from];if(pos.push(i),evaluate){if(static){this[i]=f;continue}this[i]=f(pos,this[i])}else this[i].fillM(f,pos)}};